apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
//apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply from: "${project.rootDir}/gradle-scripts/jacoco_root.gradle"

ext {
    Repo = 'Maven'
    publishedGroupId = 'com.github.mobile-tak.clevertap-android-sdk'

    siteUrl = 'https://github.com/mobile-tak/clevertap-android-sdk'
    gitUrl = 'https://github.com/mobile-tak/clevertap-android-sdk.git'

    developerId = 'clevertap'
    developerName = 'CleverTap'
    developerEmail = 'support@clevertap.com'
}


version = libraryVersion
group = publishedGroupId
//
def (major,minor,patch) = libraryVersion.split("\\.")
//
android {
    compileSdkVersion Android.compileSdkVersionVal
    buildToolsVersion Android.buildToolsVersionVal

    defaultConfig {
        minSdkVersion minSdkVersionVal
        targetSdkVersion Android.targetSdkVersionVal
        versionCode "${major}0${minor}0${patch}".toInteger()
        versionName libraryVersion

        //AGP 4.1.0 change https://developer.android.com/studio/releases/gradle-plugin#version_properties_removed_from_buildconfig_class_in_library_projects
        buildConfigField ("int", "VERSION_CODE", "$versionCode")
        buildConfigField ("String", "VERSION_NAME", "\"$versionName\"")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            //only true when a command is run with argument, like this : `gradle <command>  -Pcoverage='true'
            if(project.hasProperty('coverage')&& project.property('coverage')=='true') {
                System.out.println("coverage="+project.property('coverage'))
                testCoverageEnabled = true
            }
            buildConfigField "String", "SDK_VERSION_STRING",
                    "\"!SDK-VERSION-STRING!:$publishedGroupId:$artifact:$major.$minor.$patch.0\""
        }
        release {

            //only true when a command is run with argument, like this : `gradle <command>  -Pcoverage='true'
            if(project.hasProperty('coverage') && project.property('coverage')=='true') {
                System.out.println("coverage="+project.property('coverage'))
                testCoverageEnabled = true
            }
            buildConfigField "String", "SDK_VERSION_STRING",
                    "\"!SDK-VERSION-STRING!:$publishedGroupId:$artifact:$major.$minor.$patch.0\""
            minifyEnabled false// keep it false we will supply proguard through consumerProguardFiles
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            if (variant.getName().toLowerCase().contains('release')) {
                outputFileName = "${artifact}-${libraryVersion}.aar"
            } else if (variant.getName().toLowerCase().contains('debug')) {
                outputFileName = "${artifact}-${variant.name}-${libraryVersion}.aar"
            }
        }
    }

    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                jvmArgs '-noverify'
            }
        }
    }
}
//
//Properties properties = new Properties()
//if (project.rootProject.file('local.properties').exists()) {
//    properties.load(project.rootProject.file('local.properties').newDataInputStream())
//    properties.each { name, value ->
//        ext[name] = value
//    }
//}else{
//    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
//    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
//    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
//    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
//    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
//    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
//}
//
task sourcesJar(type: Jar) {
    baseName "$artifact"
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

artifacts {
    archives sourcesJar
}
//
afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId publishedGroupId
                artifactId artifact
                version version

                artifact sourcesJar

                pom {
                    name = artifact
                    description = libraryDescription
                    url = siteUrl
                    packaging = "aar"
                    licenses {
                        license {
                            name = licenseName
                            url = licenseUrl
                        }
                    }
                    // Version control info - if you're using GitHub, follow the format as seen here
                    scm {
                        connection = 'scm:git:github.com/mobile-tak/clevertap-android-sdk.git'
                        developerConnection = 'scm:git:ssh:github.com/mobile-tak/clevertap-android-sdk.git'
                        url = 'https://github.com/mobile-tak/clevertap-android-sdk/tree/master'
                    }
                }
            }
        }
    }
}

apply from: "${project.rootDir}/gradle-scripts/checkstyle.gradle"
apply from: "${project.rootDir}/gradle-scripts/detekt.gradle"